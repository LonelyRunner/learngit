java 设计模式  -----  六大原则

1.里氏置换原则
    所有引用基类的地方必须能够透明的使用其子类对象。也就是说，只要父类出现的地方子类就能够出现，而且替换为子类不会产生任何错误或异常
2.依赖倒置原则
    通过抽象（抽象类或接口）使各个类或模块的实现彼此独立，不相互影响，实现模块间的松耦合
    1、高层模块不应该依赖低层模块，两者都应该依赖于抽象（抽象类或接口）
    2、抽象（抽象类或接口）不应该依赖于细节（具体实现类）
    3、细节（具体实现类）应该依赖抽象
    抽象：即抽象类或接口，两者是不能够实例化的。
    细节：即具体的实现类，实现接口或者继承抽象类所产生的类，两者可以通过关键字new直接被实例化。
    实现方法：1、通过构造函数传递依赖对象
                比如在构造函数中的需要传递的参数是抽象类或接口的方式实现。
             2、通过setter方法传递依赖对象
                即在我们设置的setXXX方法中的参数为抽象类或接口，来实现传递依赖对象
             3、接口声明实现依赖对象
3.接口隔离原则
4.单一职责原则
5.迪米特法则
6.开闭原则

参考链接:http://automaticthoughts.iteye.com/blog/1563816